/* generated by Svelte v3.59.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_input_value,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import PackageList from '../components/PackageList.js';

function create_fragment(ctx) {
	let div1;
	let input;
	let t;
	let div0;
	let packagelist;
	let current;
	let mounted;
	let dispose;

	packagelist = new PackageList({
			props: { packages: /*filteredPackages*/ ctx[1] }
		});

	return {
		c() {
			div1 = element("div");
			input = element("input");
			t = space();
			div0 = element("div");
			create_component(packagelist.$$.fragment);
			attr(input, "class", "form-control");
			attr(input, "type", "search");
			attr(input, "placeholder", "This search is built in Svelte!");
			attr(div0, "class", "mt-3");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, input);
			set_input_value(input, /*search*/ ctx[0]);
			append(div1, t);
			append(div1, div0);
			mount_component(packagelist, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
				set_input_value(input, /*search*/ ctx[0]);
			}

			const packagelist_changes = {};
			if (dirty & /*filteredPackages*/ 2) packagelist_changes.packages = /*filteredPackages*/ ctx[1];
			packagelist.$set(packagelist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(packagelist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(packagelist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(packagelist);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let filteredPackages;
	let { packages = [] } = $$props;
	let search = '';

	function input_input_handler() {
		search = this.value;
		$$invalidate(0, search);
	}

	$$self.$$set = $$props => {
		if ('packages' in $$props) $$invalidate(2, packages = $$props.packages);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*packages, search*/ 5) {
			$: $$invalidate(1, filteredPackages = packages.filter(uxPackage => uxPackage.humanName.toLowerCase().includes(search.toLowerCase())));
		}
	};

	return [search, filteredPackages, packages, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { packages: 2 });
	}
}

export default Component;